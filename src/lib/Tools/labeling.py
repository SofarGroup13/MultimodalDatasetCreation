#! /usr/bin/env python2.7    
import sys, csv, os
import numpy as np


if (len(sys.argv) == 2): ##Check the correctness of the input topics
    csvFolder = sys.argv[1]
    printing = False #it is a flag that identifies if you want to show a plot of data
    overwrite = False #a flag that identifies if you want to overwrite the files generated by previous labeling
elif (len(sys.argv) == 3):
    csvFolder = sys.argv[1]
    printing = sys.argv[2]
    overwrite = False
elif (len(sys.argv) == 4):
    csvFolder = sys.argv[1]
    printing = sys.argv[2]
    overwrite = True
elif (len(sys.argv) > 3):
    print(sys.argv)
    print("invalid number of argument")
    sys.exit(1)

csvImuPath = csvFolder + "imu.csv" 
csvPointPath = csvFolder + "point.csv"
csvPointCloud2Path = csvFolder + "pointcloud2.csv"
csvGesturesPath = csvFolder + "gestures.csv"


gesturesName = []                                                                        
with open(csvGesturesPath) as csv_file:   ##new csv file
    csv_reader = csv.reader(csv_file, delimiter=',')
    for row in csv_reader:
        gesturesName.append(row[2])
    gesturesName = gesturesName[1:] #save in gesturesName elements from 1 onwards

imuData = np.genfromtxt(csvImuPath, delimiter=',')  ##creation imu data, point data, pointcloud2 data and gestures
imuData = imuData[1:,:]
pointData = np.genfromtxt(csvPointPath, delimiter=',') 
pointData = pointData[1:,:]
pointcloud2Data = np.genfromtxt(csvPointCloud2Path, delimiter=',') 
pointcloud2Data = pointcloud2Data[1:,:]
gestures = np.genfromtxt(csvGesturesPath, delimiter=',')
gestures = np.vstack([gestures[1:,:], gestures[-1, :]]) 
gestures[-1,0] = gestures[-1,0] + 5 #I isolate the instant of time from -1 to 0, which symbolizes the instant when it is stationary,then cut the useless instant and add the other 5 instants, which are precisely the "real" gestures to consider.

timeImu = imuData[:,0] + imuData[:,1]/10**9 ##express the time in nanoseconds
timePoint = pointData[:,0] + pointData[:,1]/10**9
timePointCloud2 = pointcloud2Data[:,0] + pointcloud2Data[:,1]/10**9  
timeGestures = gestures[:,0] + gestures[:,1]/10**9 

gesturesIndex = []
for time in timeGestures: ##I put the value implemented in nanosec in gesturesIndex
    gesturesIndex.append(abs(timeImu - time).argmin()) 
    gesturesIndex.append(abs(timePoint - time).argmin())
    gesturesIndex.append(abs(timePointCloud2 - time).argmin())  
    module_vel = np.sqrt(np.sum(np.power(imuData[:,3:6],2), axis=1)) #determine when the person started moving
    module_vel1 = np.sqrt(np.sum(np.power(pointData[:,3:6],2), axis=1))
    module_vel2 = np.sqrt(np.sum(np.power(pointcloud2Data[:,3:6],2), axis=1))

labelings = [] 

for i in range(0,len(gestures)-1): #-1 is cut out of range, because it must not be segmented
    g1 = module_vel[gesturesIndex[i]:gesturesIndex[i+1]+1] ## creation of the first label
    SUMM = np.sum(g1)
    weightedAverage = np.sum(g1*timeImu[gesturesIndex[i]:gesturesIndex[i+1]+1])/np.sum(g1) ##computation of the exact labeling model
    weightedAverage1 = np.sum(g1*timePoint[gesturesIndex[i]:gesturesIndex[i+1]+1])/np.sum(g1)
    weightedAverage2 = np.sum(g1*timePointCloud2[gesturesIndex[i]:gesturesIndex[i+1]+1])/np.sum(g1)
    waIndex = abs(timeImu - weightedAverage).argmin() #expresses the specific sampling time to label the IMU data
    MocIndex = abs(timePoint - weightedAverage).argmin()
    KinIndex = abs(timePointCloud2 - weightedAverage).argmin()
    c = 1
    while True:
        summ = np.sum(module_vel[waIndex-c:waIndex+c+1])
	summ1 = np.sum(module_vel[MocIndex-c:MocIndex+c+1])
	summ2 = np.sum(module_vel[KinIndex-c:kinIndex+c+1])
        if summ > 0.95*SUMM and summ2 > 0.95*SUMM and summ3 > 0.95*SUMM: #calculation of the probability (0.95 is the Gaussian normal distribution value)
        	break  
	

       c = c + 1
    start = waIndex-c ##start of segmentation
    start1 = MocIndex-c
    start2 = KinIndex-c
    if start < gesturesIndex[i]:
        start = gesturesIndex[i]
    if start1 < gesturesIndex[i]:
        start1 = gesturesIndex[i]
    if start2 < gesturesIndex[i]:
        start2 = gesturesIndex[i]
    end = waIndex+c+1 ##end of segmentation
    end1 = MocIndex+c+1
    end2 = KinIndex+c+1
    if end > gesturesIndex[i+1]+1:
        end = gesturesIndex[i+1]+1
    if end1 > gesturesIndex[i+1]+1:
        end1 = gesturesIndex[i+1]+1
    if end2 > gesturesIndex[i+1]+1:
        end2 = gesturesIndex[i+1]+1
    labelings.append([start, end])
    labelings.append([start1, end1])
    labelings.append([start2, end2])


csvName = csvFolder + 'imu_labeled.csv' 
csvName1 = csvFolder + 'point_labeled.csv'
csvName2 = csvFolder + 'pointcloud2_labeled.csv'

if os.path.isfile(csvName) and overwrite: ##write new csvName file for Imu 
    print("The labeled file already exists, overwriting")
    os.remove(csvName)

if not(os.path.isfile(csvName)): 
    with open(csvName, 'w+') as csvfile: 
        filewriter = csv.writer(csvfile, delimiter = ',')
        values = ['ros_seconds', 'ros_nanoseconds', 'android_millis', 'angular_vel_x', 'angular_vel_y', 'angular_vel_z', 'linear_acc_x', 'linear_acc_y', 'linear_acc_z', 'gesture'] 
        filewriter.writerow(values)
        gestureTag = 0 

for index in range(0, len(imuData)):
            values = imuData[index].tolist()
            l = labelings[gestureTag]
            if index < l[0]:
                values.append("nan") 
            elif index >= l[0] and index <= l[1]:
                values.append(gesturesName[gestureTag]) 
            elif index > l[1]:
                values.append("nan")
                if gestureTag < len(labelings)-1: 
                    gestureTag = gestureTag + 1
            filewriter.writerow(values)
else:
    print("Warning the file already exist")

if os.path.isfile(csvName1) and overwrite: ##write new csvName file for Point
    print("The labeled file already exists, overwriting")
    os.remove(csvName1)

if not(os.path.isfile(csvName1)): 
    with open(csvName1, 'w+') as csvfile: 
        filewriter = csv.writer(csvfile, delimiter = ',')
        values = ['ros_seconds', 'ros_nanoseconds','x','y','z', 'gesture'] 
        filewriter.writerow(values)
        gestureTag = 0 

for index in range(0, len(pointData)):
            values = pointData[index].tolist()
            l = labelings[gestureTag]
            if index < l[0]:
                values.append("nan") 
            elif index >= l[0] and index <= l[1]:
                values.append(gesturesName[gestureTag]) 
            elif index > l[1]:
                values.append("nan")
                if gestureTag < len(labelings)-1: 
                    gestureTag = gestureTag + 1
            filewriter.writerow(values)
else:
    print("Warning the file already exist")

if os.path.isfile(csvName2) and overwrite: ##write new csvName file for Pointcloud2 
    print("The labeled file already exists, overwriting")
    os.remove(csvName2)

if not(os.path.isfile(csvName2)): 
    with open(csvName2, 'w+') as csvfile: 
        filewriter = csv.writer(csvfile, delimiter = ',')
        values = ['ros_seconds', 'ros_nanoseconds','height','width', 'gesture'] 
        filewriter.writerow(values)
        gestureTag = 0 


        for index in range(0, len(pointcloud2Data)):
            values = pointcloud2Data[index].tolist()
            l = labelings[gestureTag]
            if index < l[0]:
                values.append("nan") 
            elif index >= l[0] and index <= l[1]:
                values.append(gesturesName[gestureTag]) 
            elif index > l[1]:
                values.append("nan")
                if gestureTag < len(labelings)-1: 
                    gestureTag = gestureTag + 1
            filewriter.writerow(values)
else:
    print("Warning the file already exist")

